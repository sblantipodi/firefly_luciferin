// Generated by jextract

package org.dpsoftware.gui.bindings.notify;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class notify_h {

    notify_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfLong C_LONG = ValueLayout.JAVA_LONG;

    private static class g_object_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            notify_h.C_POINTER
        );

        public static final MemorySegment ADDR = notify_h.findOrThrow("g_object_unref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_unref$descriptor() {
        return g_object_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static MethodHandle g_object_unref$handle() {
        return g_object_unref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static MemorySegment g_object_unref$address() {
        return g_object_unref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static void g_object_unref(MemorySegment object) {
        var mh$ = g_object_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_unref", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            notify_h.C_POINTER,
            notify_h.C_POINTER,
            notify_h.C_POINTER
        );

        public static final MemorySegment ADDR = notify_h.findOrThrow("gdk_pixbuf_new_from_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file(const char *filename, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_file$descriptor() {
        return gdk_pixbuf_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file(const char *filename, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_file$handle() {
        return gdk_pixbuf_new_from_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file(const char *filename, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_file$address() {
        return gdk_pixbuf_new_from_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file(const char *filename, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_file(MemorySegment filename, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_file", filename, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class notify_notification_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            notify_h.C_POINTER,
            notify_h.C_POINTER,
            notify_h.C_POINTER,
            notify_h.C_POINTER
        );

        public static final MemorySegment ADDR = notify_h.findOrThrow("notify_notification_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NotifyNotification *notify_notification_new(const char *summary, const char *body, const char *icon)
     * }
     */
    public static FunctionDescriptor notify_notification_new$descriptor() {
        return notify_notification_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NotifyNotification *notify_notification_new(const char *summary, const char *body, const char *icon)
     * }
     */
    public static MethodHandle notify_notification_new$handle() {
        return notify_notification_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NotifyNotification *notify_notification_new(const char *summary, const char *body, const char *icon)
     * }
     */
    public static MemorySegment notify_notification_new$address() {
        return notify_notification_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NotifyNotification *notify_notification_new(const char *summary, const char *body, const char *icon)
     * }
     */
    public static MemorySegment notify_notification_new(MemorySegment summary, MemorySegment body, MemorySegment icon) {
        var mh$ = notify_notification_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("notify_notification_new", summary, body, icon);
            }
            return (MemorySegment)mh$.invokeExact(summary, body, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class notify_notification_show {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            notify_h.C_INT,
            notify_h.C_POINTER,
            notify_h.C_POINTER
        );

        public static final MemorySegment ADDR = notify_h.findOrThrow("notify_notification_show");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gboolean notify_notification_show(NotifyNotification *notification, GError **error)
     * }
     */
    public static FunctionDescriptor notify_notification_show$descriptor() {
        return notify_notification_show.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gboolean notify_notification_show(NotifyNotification *notification, GError **error)
     * }
     */
    public static MethodHandle notify_notification_show$handle() {
        return notify_notification_show.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * gboolean notify_notification_show(NotifyNotification *notification, GError **error)
     * }
     */
    public static MemorySegment notify_notification_show$address() {
        return notify_notification_show.ADDR;
    }

    /**
     * {@snippet lang=c :
     * gboolean notify_notification_show(NotifyNotification *notification, GError **error)
     * }
     */
    public static int notify_notification_show(MemorySegment notification, MemorySegment error) {
        var mh$ = notify_notification_show.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("notify_notification_show", notification, error);
            }
            return (int)mh$.invokeExact(notification, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class notify_notification_set_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            notify_h.C_POINTER,
            notify_h.C_INT
        );

        public static final MemorySegment ADDR = notify_h.findOrThrow("notify_notification_set_timeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void notify_notification_set_timeout(NotifyNotification *notification, gint timeout)
     * }
     */
    public static FunctionDescriptor notify_notification_set_timeout$descriptor() {
        return notify_notification_set_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void notify_notification_set_timeout(NotifyNotification *notification, gint timeout)
     * }
     */
    public static MethodHandle notify_notification_set_timeout$handle() {
        return notify_notification_set_timeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void notify_notification_set_timeout(NotifyNotification *notification, gint timeout)
     * }
     */
    public static MemorySegment notify_notification_set_timeout$address() {
        return notify_notification_set_timeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void notify_notification_set_timeout(NotifyNotification *notification, gint timeout)
     * }
     */
    public static void notify_notification_set_timeout(MemorySegment notification, int timeout) {
        var mh$ = notify_notification_set_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("notify_notification_set_timeout", notification, timeout);
            }
            mh$.invokeExact(notification, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class notify_notification_set_urgency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            notify_h.C_POINTER,
            notify_h.C_INT
        );

        public static final MemorySegment ADDR = notify_h.findOrThrow("notify_notification_set_urgency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void notify_notification_set_urgency(NotifyNotification *notification, NotifyUrgency urgency)
     * }
     */
    public static FunctionDescriptor notify_notification_set_urgency$descriptor() {
        return notify_notification_set_urgency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void notify_notification_set_urgency(NotifyNotification *notification, NotifyUrgency urgency)
     * }
     */
    public static MethodHandle notify_notification_set_urgency$handle() {
        return notify_notification_set_urgency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void notify_notification_set_urgency(NotifyNotification *notification, NotifyUrgency urgency)
     * }
     */
    public static MemorySegment notify_notification_set_urgency$address() {
        return notify_notification_set_urgency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void notify_notification_set_urgency(NotifyNotification *notification, NotifyUrgency urgency)
     * }
     */
    public static void notify_notification_set_urgency(MemorySegment notification, int urgency) {
        var mh$ = notify_notification_set_urgency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("notify_notification_set_urgency", notification, urgency);
            }
            mh$.invokeExact(notification, urgency);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class notify_notification_set_image_from_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            notify_h.C_POINTER,
            notify_h.C_POINTER
        );

        public static final MemorySegment ADDR = notify_h.findOrThrow("notify_notification_set_image_from_pixbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void notify_notification_set_image_from_pixbuf(NotifyNotification *notification, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor notify_notification_set_image_from_pixbuf$descriptor() {
        return notify_notification_set_image_from_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void notify_notification_set_image_from_pixbuf(NotifyNotification *notification, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle notify_notification_set_image_from_pixbuf$handle() {
        return notify_notification_set_image_from_pixbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void notify_notification_set_image_from_pixbuf(NotifyNotification *notification, GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment notify_notification_set_image_from_pixbuf$address() {
        return notify_notification_set_image_from_pixbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void notify_notification_set_image_from_pixbuf(NotifyNotification *notification, GdkPixbuf *pixbuf)
     * }
     */
    public static void notify_notification_set_image_from_pixbuf(MemorySegment notification, MemorySegment pixbuf) {
        var mh$ = notify_notification_set_image_from_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("notify_notification_set_image_from_pixbuf", notification, pixbuf);
            }
            mh$.invokeExact(notification, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class notify_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            notify_h.C_INT,
            notify_h.C_POINTER
        );

        public static final MemorySegment ADDR = notify_h.findOrThrow("notify_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gboolean notify_init(const char *app_name)
     * }
     */
    public static FunctionDescriptor notify_init$descriptor() {
        return notify_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gboolean notify_init(const char *app_name)
     * }
     */
    public static MethodHandle notify_init$handle() {
        return notify_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * gboolean notify_init(const char *app_name)
     * }
     */
    public static MemorySegment notify_init$address() {
        return notify_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * gboolean notify_init(const char *app_name)
     * }
     */
    public static int notify_init(MemorySegment app_name) {
        var mh$ = notify_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("notify_init", app_name);
            }
            return (int)mh$.invokeExact(app_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class notify_uninit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = notify_h.findOrThrow("notify_uninit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void notify_uninit()
     * }
     */
    public static FunctionDescriptor notify_uninit$descriptor() {
        return notify_uninit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void notify_uninit()
     * }
     */
    public static MethodHandle notify_uninit$handle() {
        return notify_uninit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void notify_uninit()
     * }
     */
    public static MemorySegment notify_uninit$address() {
        return notify_uninit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void notify_uninit()
     * }
     */
    public static void notify_uninit() {
        var mh$ = notify_uninit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("notify_uninit");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

