// Generated by jextract

package org.dpsoftware.gui.bindings.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h {

    app_indicator_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfLong C_LONG = ValueLayout.JAVA_LONG;

    private static class g_error_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_error_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_error_free(GError *error)
     * }
     */
    public static FunctionDescriptor g_error_free$descriptor() {
        return g_error_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_error_free(GError *error)
     * }
     */
    public static MethodHandle g_error_free$handle() {
        return g_error_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_error_free(GError *error)
     * }
     */
    public static MemorySegment g_error_free$address() {
        return g_error_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_error_free(GError *error)
     * }
     */
    public static void g_error_free(MemorySegment error) {
        var mh$ = g_error_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_error_free", error);
            }
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_data_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_object_set_data_full");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_object_set_data_full$descriptor() {
        return g_object_set_data_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_object_set_data_full$handle() {
        return g_object_set_data_full.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MemorySegment g_object_set_data_full$address() {
        return g_object_set_data_full.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void g_object_set_data_full(MemorySegment object, MemorySegment key, MemorySegment data, MemorySegment destroy) {
        var mh$ = g_object_set_data_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_data_full", object, key, data, destroy);
            }
            mh$.invokeExact(object, key, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_connect_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_signal_connect_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_object(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags)
     * }
     */
    public static FunctionDescriptor g_signal_connect_object$descriptor() {
        return g_signal_connect_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_object(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags)
     * }
     */
    public static MethodHandle g_signal_connect_object$handle() {
        return g_signal_connect_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_object(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags)
     * }
     */
    public static MemorySegment g_signal_connect_object$address() {
        return g_signal_connect_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gulong g_signal_connect_object(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags)
     * }
     */
    public static long g_signal_connect_object(MemorySegment instance, MemorySegment detailed_signal, MemorySegment c_handler, MemorySegment gobject, int connect_flags) {
        var mh$ = g_signal_connect_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_connect_object", instance, detailed_signal, c_handler, gobject, connect_flags);
            }
            return (long)mh$.invokeExact(instance, detailed_signal, c_handler, gobject, connect_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gdk_event_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_get()
     * }
     */
    public static FunctionDescriptor gdk_event_get$descriptor() {
        return gdk_event_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_get()
     * }
     */
    public static MethodHandle gdk_event_get$handle() {
        return gdk_event_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_get()
     * }
     */
    public static MemorySegment gdk_event_get$address() {
        return gdk_event_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_get()
     * }
     */
    public static MemorySegment gdk_event_get() {
        var mh$ = gdk_event_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_widget_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroy(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_destroy$descriptor() {
        return gtk_widget_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroy(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_destroy$handle() {
        return gtk_widget_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroy(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_destroy$address() {
        return gtk_widget_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_widget_destroy(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_destroy(MemorySegment widget) {
        var mh$ = gtk_widget_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_destroy", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_destroyed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_widget_destroyed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroyed(GtkWidget *widget, GtkWidget **widget_pointer)
     * }
     */
    public static FunctionDescriptor gtk_widget_destroyed$descriptor() {
        return gtk_widget_destroyed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroyed(GtkWidget *widget, GtkWidget **widget_pointer)
     * }
     */
    public static MethodHandle gtk_widget_destroyed$handle() {
        return gtk_widget_destroyed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroyed(GtkWidget *widget, GtkWidget **widget_pointer)
     * }
     */
    public static MemorySegment gtk_widget_destroyed$address() {
        return gtk_widget_destroyed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_widget_destroyed(GtkWidget *widget, GtkWidget **widget_pointer)
     * }
     */
    public static void gtk_widget_destroyed(MemorySegment widget, MemorySegment widget_pointer) {
        var mh$ = gtk_widget_destroyed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_destroyed", widget, widget_pointer);
            }
            mh$.invokeExact(widget, widget_pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_show {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_widget_show");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_show(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_show$descriptor() {
        return gtk_widget_show.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_show(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_show$handle() {
        return gtk_widget_show.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_widget_show(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_show$address() {
        return gtk_widget_show.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_widget_show(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_show(MemorySegment widget) {
        var mh$ = gtk_widget_show.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_show", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_show_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_widget_show_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_show_all(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_show_all$descriptor() {
        return gtk_widget_show_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_show_all(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_show_all$handle() {
        return gtk_widget_show_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_widget_show_all(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_show_all$address() {
        return gtk_widget_show_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_widget_show_all(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_show_all(MemorySegment widget) {
        var mh$ = gtk_widget_show_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_show_all", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_grab_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_widget_grab_focus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_grab_focus(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_grab_focus$descriptor() {
        return gtk_widget_grab_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_grab_focus(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_grab_focus$handle() {
        return gtk_widget_grab_focus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_widget_grab_focus(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_grab_focus$address() {
        return gtk_widget_grab_focus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_widget_grab_focus(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_grab_focus(MemorySegment widget) {
        var mh$ = gtk_widget_grab_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_grab_focus", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_container_add");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_add(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_container_add$descriptor() {
        return gtk_container_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_add(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_container_add$handle() {
        return gtk_container_add.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_container_add(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_container_add$address() {
        return gtk_container_add.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_container_add(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static void gtk_container_add(MemorySegment container, MemorySegment widget) {
        var mh$ = gtk_container_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_add", container, widget);
            }
            mh$.invokeExact(container, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_window_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_new(GtkWindowType type)
     * }
     */
    public static FunctionDescriptor gtk_window_new$descriptor() {
        return gtk_window_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_new(GtkWindowType type)
     * }
     */
    public static MethodHandle gtk_window_new$handle() {
        return gtk_window_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_new(GtkWindowType type)
     * }
     */
    public static MemorySegment gtk_window_new$address() {
        return gtk_window_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_new(GtkWindowType type)
     * }
     */
    public static MemorySegment gtk_window_new(int type) {
        var mh$ = gtk_window_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_new", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_window_set_title");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_title(GtkWindow *window, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_window_set_title$descriptor() {
        return gtk_window_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_title(GtkWindow *window, const gchar *title)
     * }
     */
    public static MethodHandle gtk_window_set_title$handle() {
        return gtk_window_set_title.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_window_set_title(GtkWindow *window, const gchar *title)
     * }
     */
    public static MemorySegment gtk_window_set_title$address() {
        return gtk_window_set_title.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_title(GtkWindow *window, const gchar *title)
     * }
     */
    public static void gtk_window_set_title(MemorySegment window, MemorySegment title) {
        var mh$ = gtk_window_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_title", window, title);
            }
            mh$.invokeExact(window, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_add_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_window_add_accel_group");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_add_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_window_add_accel_group$descriptor() {
        return gtk_window_add_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_add_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_window_add_accel_group$handle() {
        return gtk_window_add_accel_group.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_window_add_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static MemorySegment gtk_window_add_accel_group$address() {
        return gtk_window_add_accel_group.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_window_add_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_window_add_accel_group(MemorySegment window, MemorySegment accel_group) {
        var mh$ = gtk_window_add_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_add_accel_group", window, accel_group);
            }
            mh$.invokeExact(window, accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_window_set_icon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon(GtkWindow *window, GdkPixbuf *icon)
     * }
     */
    public static FunctionDescriptor gtk_window_set_icon$descriptor() {
        return gtk_window_set_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon(GtkWindow *window, GdkPixbuf *icon)
     * }
     */
    public static MethodHandle gtk_window_set_icon$handle() {
        return gtk_window_set_icon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon(GtkWindow *window, GdkPixbuf *icon)
     * }
     */
    public static MemorySegment gtk_window_set_icon$address() {
        return gtk_window_set_icon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_icon(GtkWindow *window, GdkPixbuf *icon)
     * }
     */
    public static void gtk_window_set_icon(MemorySegment window, MemorySegment icon) {
        var mh$ = gtk_window_set_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_icon", window, icon);
            }
            mh$.invokeExact(window, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_window_set_icon_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_name(GtkWindow *window, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_window_set_icon_name$descriptor() {
        return gtk_window_set_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_name(GtkWindow *window, const gchar *name)
     * }
     */
    public static MethodHandle gtk_window_set_icon_name$handle() {
        return gtk_window_set_icon_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_name(GtkWindow *window, const gchar *name)
     * }
     */
    public static MemorySegment gtk_window_set_icon_name$address() {
        return gtk_window_set_icon_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_name(GtkWindow *window, const gchar *name)
     * }
     */
    public static void gtk_window_set_icon_name(MemorySegment window, MemorySegment name) {
        var mh$ = gtk_window_set_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_icon_name", window, name);
            }
            mh$.invokeExact(window, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_default_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_window_set_default_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_size(GtkWindow *window, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_window_set_default_size$descriptor() {
        return gtk_window_set_default_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_size(GtkWindow *window, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_window_set_default_size$handle() {
        return gtk_window_set_default_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_size(GtkWindow *window, gint width, gint height)
     * }
     */
    public static MemorySegment gtk_window_set_default_size$address() {
        return gtk_window_set_default_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_default_size(GtkWindow *window, gint width, gint height)
     * }
     */
    public static void gtk_window_set_default_size(MemorySegment window, int width, int height) {
        var mh$ = gtk_window_set_default_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_default_size", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_menu_shell_append");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_append(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_append$descriptor() {
        return gtk_menu_shell_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_append(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_menu_shell_append$handle() {
        return gtk_menu_shell_append.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_append(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static MemorySegment gtk_menu_shell_append$address() {
        return gtk_menu_shell_append.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_append(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static void gtk_menu_shell_append(MemorySegment menu_shell, MemorySegment child) {
        var mh$ = gtk_menu_shell_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_append", menu_shell, child);
            }
            mh$.invokeExact(menu_shell, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_menu_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new()
     * }
     */
    public static FunctionDescriptor gtk_menu_new$descriptor() {
        return gtk_menu_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new()
     * }
     */
    public static MethodHandle gtk_menu_new$handle() {
        return gtk_menu_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new()
     * }
     */
    public static MemorySegment gtk_menu_new$address() {
        return gtk_menu_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new()
     * }
     */
    public static MemorySegment gtk_menu_new() {
        var mh$ = gtk_menu_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_menu_item_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new()
     * }
     */
    public static FunctionDescriptor gtk_menu_item_new$descriptor() {
        return gtk_menu_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new()
     * }
     */
    public static MethodHandle gtk_menu_item_new$handle() {
        return gtk_menu_item_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new()
     * }
     */
    public static MemorySegment gtk_menu_item_new$address() {
        return gtk_menu_item_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new()
     * }
     */
    public static MemorySegment gtk_menu_item_new() {
        var mh$ = gtk_menu_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_menu_item_new_with_label");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_new_with_label$descriptor() {
        return gtk_menu_item_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static MethodHandle gtk_menu_item_new_with_label$handle() {
        return gtk_menu_item_new_with_label.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static MemorySegment gtk_menu_item_new_with_label$address() {
        return gtk_menu_item_new_with_label.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static MemorySegment gtk_menu_item_new_with_label(MemorySegment label) {
        var mh$ = gtk_menu_item_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_new_with_label", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_set_submenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_menu_item_set_submenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_submenu(GtkMenuItem *menu_item, GtkWidget *submenu)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_set_submenu$descriptor() {
        return gtk_menu_item_set_submenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_submenu(GtkMenuItem *menu_item, GtkWidget *submenu)
     * }
     */
    public static MethodHandle gtk_menu_item_set_submenu$handle() {
        return gtk_menu_item_set_submenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_submenu(GtkMenuItem *menu_item, GtkWidget *submenu)
     * }
     */
    public static MemorySegment gtk_menu_item_set_submenu$address() {
        return gtk_menu_item_set_submenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_submenu(GtkMenuItem *menu_item, GtkWidget *submenu)
     * }
     */
    public static void gtk_menu_item_set_submenu(MemorySegment menu_item, MemorySegment submenu) {
        var mh$ = gtk_menu_item_set_submenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_set_submenu", menu_item, submenu);
            }
            mh$.invokeExact(menu_item, submenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_menu_item_set_label");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_label(GtkMenuItem *menu_item, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_set_label$descriptor() {
        return gtk_menu_item_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_label(GtkMenuItem *menu_item, const gchar *label)
     * }
     */
    public static MethodHandle gtk_menu_item_set_label$handle() {
        return gtk_menu_item_set_label.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_label(GtkMenuItem *menu_item, const gchar *label)
     * }
     */
    public static MemorySegment gtk_menu_item_set_label$address() {
        return gtk_menu_item_set_label.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_label(GtkMenuItem *menu_item, const gchar *label)
     * }
     */
    public static void gtk_menu_item_set_label(MemorySegment menu_item, MemorySegment label) {
        var mh$ = gtk_menu_item_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_set_label", menu_item, label);
            }
            mh$.invokeExact(menu_item, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_menu_item_get_label");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_label(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_get_label$descriptor() {
        return gtk_menu_item_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_label(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_get_label$handle() {
        return gtk_menu_item_get_label.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_label(GtkMenuItem *menu_item)
     * }
     */
    public static MemorySegment gtk_menu_item_get_label$address() {
        return gtk_menu_item_get_label.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_label(GtkMenuItem *menu_item)
     * }
     */
    public static MemorySegment gtk_menu_item_get_label(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_get_label", menu_item);
            }
            return (MemorySegment)mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_init(int *argc, char ***argv)
     * }
     */
    public static FunctionDescriptor gtk_init$descriptor() {
        return gtk_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_init(int *argc, char ***argv)
     * }
     */
    public static MethodHandle gtk_init$handle() {
        return gtk_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_init(int *argc, char ***argv)
     * }
     */
    public static MemorySegment gtk_init$address() {
        return gtk_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_init(int *argc, char ***argv)
     * }
     */
    public static void gtk_init(MemorySegment argc, MemorySegment argv) {
        var mh$ = gtk_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_init", argc, argv);
            }
            mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_main {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_main");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_main()
     * }
     */
    public static FunctionDescriptor gtk_main$descriptor() {
        return gtk_main.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_main()
     * }
     */
    public static MethodHandle gtk_main$handle() {
        return gtk_main.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_main()
     * }
     */
    public static MemorySegment gtk_main$address() {
        return gtk_main.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_main()
     * }
     */
    public static void gtk_main() {
        var mh$ = gtk_main.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_main");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_message_dialog_new(GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...)
     * }
     */
    public static class gtk_message_dialog_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_message_dialog_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_message_dialog_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_message_dialog_new(GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...)
         * }
         */
        public static gtk_message_dialog_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_message_dialog_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment parent, int flags, int type, int buttons, MemorySegment message_format, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_message_dialog_new", parent, flags, type, buttons, message_format, x5);
                }
                return (MemorySegment) spreader.invokeExact(parent, flags, type, buttons, message_format, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_scrolled_window_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_scrolled_window_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_new$descriptor() {
        return gtk_scrolled_window_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static MethodHandle gtk_scrolled_window_new$handle() {
        return gtk_scrolled_window_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static MemorySegment gtk_scrolled_window_new$address() {
        return gtk_scrolled_window_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static MemorySegment gtk_scrolled_window_new(MemorySegment hadjustment, MemorySegment vadjustment) {
        var mh$ = gtk_scrolled_window_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_new", hadjustment, vadjustment);
            }
            return (MemorySegment)mh$.invokeExact(hadjustment, vadjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_policy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_scrolled_window_set_policy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_policy$descriptor() {
        return gtk_scrolled_window_set_policy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_policy$handle() {
        return gtk_scrolled_window_set_policy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy)
     * }
     */
    public static MemorySegment gtk_scrolled_window_set_policy$address() {
        return gtk_scrolled_window_set_policy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy)
     * }
     */
    public static void gtk_scrolled_window_set_policy(MemorySegment scrolled_window, int hscrollbar_policy, int vscrollbar_policy) {
        var mh$ = gtk_scrolled_window_set_policy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_policy", scrolled_window, hscrollbar_policy, vscrollbar_policy);
            }
            mh$.invokeExact(scrolled_window, hscrollbar_policy, vscrollbar_policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_shadow_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_scrolled_window_set_shadow_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_shadow_type(GtkScrolledWindow *scrolled_window, GtkShadowType type)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_shadow_type$descriptor() {
        return gtk_scrolled_window_set_shadow_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_shadow_type(GtkScrolledWindow *scrolled_window, GtkShadowType type)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_shadow_type$handle() {
        return gtk_scrolled_window_set_shadow_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_shadow_type(GtkScrolledWindow *scrolled_window, GtkShadowType type)
     * }
     */
    public static MemorySegment gtk_scrolled_window_set_shadow_type$address() {
        return gtk_scrolled_window_set_shadow_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_shadow_type(GtkScrolledWindow *scrolled_window, GtkShadowType type)
     * }
     */
    public static void gtk_scrolled_window_set_shadow_type(MemorySegment scrolled_window, int type) {
        var mh$ = gtk_scrolled_window_set_shadow_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_shadow_type", scrolled_window, type);
            }
            mh$.invokeExact(scrolled_window, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_separator_menu_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_separator_menu_item_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_menu_item_new()
     * }
     */
    public static FunctionDescriptor gtk_separator_menu_item_new$descriptor() {
        return gtk_separator_menu_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_menu_item_new()
     * }
     */
    public static MethodHandle gtk_separator_menu_item_new$handle() {
        return gtk_separator_menu_item_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_menu_item_new()
     * }
     */
    public static MemorySegment gtk_separator_menu_item_new$address() {
        return gtk_separator_menu_item_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_menu_item_new()
     * }
     */
    public static MemorySegment gtk_separator_menu_item_new() {
        var mh$ = gtk_separator_menu_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_separator_menu_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_statusbar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_statusbar_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_new()
     * }
     */
    public static FunctionDescriptor gtk_statusbar_new$descriptor() {
        return gtk_statusbar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_new()
     * }
     */
    public static MethodHandle gtk_statusbar_new$handle() {
        return gtk_statusbar_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_new()
     * }
     */
    public static MemorySegment gtk_statusbar_new$address() {
        return gtk_statusbar_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_new()
     * }
     */
    public static MemorySegment gtk_statusbar_new() {
        var mh$ = gtk_statusbar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_statusbar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_text_view_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new()
     * }
     */
    public static FunctionDescriptor gtk_text_view_new$descriptor() {
        return gtk_text_view_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new()
     * }
     */
    public static MethodHandle gtk_text_view_new$handle() {
        return gtk_text_view_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new()
     * }
     */
    public static MemorySegment gtk_text_view_new$address() {
        return gtk_text_view_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new()
     * }
     */
    public static MemorySegment gtk_text_view_new() {
        var mh$ = gtk_text_view_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_action_get_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_name(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_name$descriptor() {
        return gtk_action_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_name(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_name$handle() {
        return gtk_action_get_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_name(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_name$address() {
        return gtk_action_get_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_name(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_name(MemorySegment action) {
        var mh$ = gtk_action_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_name", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_action_group_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkActionGroup *gtk_action_group_new(const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_action_group_new$descriptor() {
        return gtk_action_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkActionGroup *gtk_action_group_new(const gchar *name)
     * }
     */
    public static MethodHandle gtk_action_group_new$handle() {
        return gtk_action_group_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkActionGroup *gtk_action_group_new(const gchar *name)
     * }
     */
    public static MemorySegment gtk_action_group_new$address() {
        return gtk_action_group_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkActionGroup *gtk_action_group_new(const gchar *name)
     * }
     */
    public static MemorySegment gtk_action_group_new(MemorySegment name) {
        var mh$ = gtk_action_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_new", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_action_group_add_action");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_action$descriptor() {
        return gtk_action_group_add_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_group_add_action$handle() {
        return gtk_action_group_add_action.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_group_add_action$address() {
        return gtk_action_group_add_action.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static void gtk_action_group_add_action(MemorySegment action_group, MemorySegment action) {
        var mh$ = gtk_action_group_add_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_action", action_group, action);
            }
            mh$.invokeExact(action_group, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_actions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_action_group_add_actions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_actions$descriptor() {
        return gtk_action_group_add_actions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_action_group_add_actions$handle() {
        return gtk_action_group_add_actions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static MemorySegment gtk_action_group_add_actions$address() {
        return gtk_action_group_add_actions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static void gtk_action_group_add_actions(MemorySegment action_group, MemorySegment entries, int n_entries, MemorySegment user_data) {
        var mh$ = gtk_action_group_add_actions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_actions", action_group, entries, n_entries, user_data);
            }
            mh$.invokeExact(action_group, entries, n_entries, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_new_from_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_status_icon_new_from_icon_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_icon_name(const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_new_from_icon_name$descriptor() {
        return gtk_status_icon_new_from_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_icon_name(const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_status_icon_new_from_icon_name$handle() {
        return gtk_status_icon_new_from_icon_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_icon_name(const gchar *icon_name)
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_icon_name$address() {
        return gtk_status_icon_new_from_icon_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_icon_name(const gchar *icon_name)
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_icon_name(MemorySegment icon_name) {
        var mh$ = gtk_status_icon_new_from_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_new_from_icon_name", icon_name);
            }
            return (MemorySegment)mh$.invokeExact(icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_table_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_table_new(guint rows, guint columns, gboolean homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_table_new$descriptor() {
        return gtk_table_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_table_new(guint rows, guint columns, gboolean homogeneous)
     * }
     */
    public static MethodHandle gtk_table_new$handle() {
        return gtk_table_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_table_new(guint rows, guint columns, gboolean homogeneous)
     * }
     */
    public static MemorySegment gtk_table_new$address() {
        return gtk_table_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_table_new(guint rows, guint columns, gboolean homogeneous)
     * }
     */
    public static MemorySegment gtk_table_new(int rows, int columns, int homogeneous) {
        var mh$ = gtk_table_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_new", rows, columns, homogeneous);
            }
            return (MemorySegment)mh$.invokeExact(rows, columns, homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_table_attach");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_attach(GtkTable *table, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding)
     * }
     */
    public static FunctionDescriptor gtk_table_attach$descriptor() {
        return gtk_table_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_attach(GtkTable *table, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding)
     * }
     */
    public static MethodHandle gtk_table_attach$handle() {
        return gtk_table_attach.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_table_attach(GtkTable *table, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding)
     * }
     */
    public static MemorySegment gtk_table_attach$address() {
        return gtk_table_attach.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_table_attach(GtkTable *table, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding)
     * }
     */
    public static void gtk_table_attach(MemorySegment table, MemorySegment child, int left_attach, int right_attach, int top_attach, int bottom_attach, int xoptions, int yoptions, int xpadding, int ypadding) {
        var mh$ = gtk_table_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_attach", table, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding);
            }
            mh$.invokeExact(table, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_ui_manager_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkUIManager *gtk_ui_manager_new()
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_new$descriptor() {
        return gtk_ui_manager_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkUIManager *gtk_ui_manager_new()
     * }
     */
    public static MethodHandle gtk_ui_manager_new$handle() {
        return gtk_ui_manager_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkUIManager *gtk_ui_manager_new()
     * }
     */
    public static MemorySegment gtk_ui_manager_new$address() {
        return gtk_ui_manager_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkUIManager *gtk_ui_manager_new()
     * }
     */
    public static MemorySegment gtk_ui_manager_new() {
        var mh$ = gtk_ui_manager_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_insert_action_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_ui_manager_insert_action_group");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_insert_action_group(GtkUIManager *manager, GtkActionGroup *action_group, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_insert_action_group$descriptor() {
        return gtk_ui_manager_insert_action_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_insert_action_group(GtkUIManager *manager, GtkActionGroup *action_group, gint pos)
     * }
     */
    public static MethodHandle gtk_ui_manager_insert_action_group$handle() {
        return gtk_ui_manager_insert_action_group.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_insert_action_group(GtkUIManager *manager, GtkActionGroup *action_group, gint pos)
     * }
     */
    public static MemorySegment gtk_ui_manager_insert_action_group$address() {
        return gtk_ui_manager_insert_action_group.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_ui_manager_insert_action_group(GtkUIManager *manager, GtkActionGroup *action_group, gint pos)
     * }
     */
    public static void gtk_ui_manager_insert_action_group(MemorySegment manager, MemorySegment action_group, int pos) {
        var mh$ = gtk_ui_manager_insert_action_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_insert_action_group", manager, action_group, pos);
            }
            mh$.invokeExact(manager, action_group, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_get_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_ui_manager_get_accel_group");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_ui_manager_get_accel_group(GtkUIManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_accel_group$descriptor() {
        return gtk_ui_manager_get_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_ui_manager_get_accel_group(GtkUIManager *manager)
     * }
     */
    public static MethodHandle gtk_ui_manager_get_accel_group$handle() {
        return gtk_ui_manager_get_accel_group.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_ui_manager_get_accel_group(GtkUIManager *manager)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_accel_group$address() {
        return gtk_ui_manager_get_accel_group.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_ui_manager_get_accel_group(GtkUIManager *manager)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_accel_group(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_accel_group", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_get_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_ui_manager_get_widget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_ui_manager_get_widget(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_widget$descriptor() {
        return gtk_ui_manager_get_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_ui_manager_get_widget(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static MethodHandle gtk_ui_manager_get_widget$handle() {
        return gtk_ui_manager_get_widget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_ui_manager_get_widget(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_widget$address() {
        return gtk_ui_manager_get_widget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_ui_manager_get_widget(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_widget(MemorySegment manager, MemorySegment path) {
        var mh$ = gtk_ui_manager_get_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_widget", manager, path);
            }
            return (MemorySegment)mh$.invokeExact(manager, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_add_ui_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_ui_manager_add_ui_from_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_string(GtkUIManager *manager, const gchar *buffer, gssize length, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_add_ui_from_string$descriptor() {
        return gtk_ui_manager_add_ui_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_string(GtkUIManager *manager, const gchar *buffer, gssize length, GError **error)
     * }
     */
    public static MethodHandle gtk_ui_manager_add_ui_from_string$handle() {
        return gtk_ui_manager_add_ui_from_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_string(GtkUIManager *manager, const gchar *buffer, gssize length, GError **error)
     * }
     */
    public static MemorySegment gtk_ui_manager_add_ui_from_string$address() {
        return gtk_ui_manager_add_ui_from_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_string(GtkUIManager *manager, const gchar *buffer, gssize length, GError **error)
     * }
     */
    public static int gtk_ui_manager_add_ui_from_string(MemorySegment manager, MemorySegment buffer, long length, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_add_ui_from_string", manager, buffer, length, error);
            }
            return (int)mh$.invokeExact(manager, buffer, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_add_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_ui_manager_add_ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_add_ui(GtkUIManager *manager, guint merge_id, const gchar *path, const gchar *name, const gchar *action, GtkUIManagerItemType type, gboolean top)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_add_ui$descriptor() {
        return gtk_ui_manager_add_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_add_ui(GtkUIManager *manager, guint merge_id, const gchar *path, const gchar *name, const gchar *action, GtkUIManagerItemType type, gboolean top)
     * }
     */
    public static MethodHandle gtk_ui_manager_add_ui$handle() {
        return gtk_ui_manager_add_ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_add_ui(GtkUIManager *manager, guint merge_id, const gchar *path, const gchar *name, const gchar *action, GtkUIManagerItemType type, gboolean top)
     * }
     */
    public static MemorySegment gtk_ui_manager_add_ui$address() {
        return gtk_ui_manager_add_ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gtk_ui_manager_add_ui(GtkUIManager *manager, guint merge_id, const gchar *path, const gchar *name, const gchar *action, GtkUIManagerItemType type, gboolean top)
     * }
     */
    public static void gtk_ui_manager_add_ui(MemorySegment manager, int merge_id, MemorySegment path, MemorySegment name, MemorySegment action, int type, int top) {
        var mh$ = gtk_ui_manager_add_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_add_ui", manager, merge_id, path, name, action, type, top);
            }
            mh$.invokeExact(manager, merge_id, path, name, action, type, top);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * AppIndicator *app_indicator_new(const gchar *id, const gchar *icon_name, AppIndicatorCategory category)
     * }
     */
    public static FunctionDescriptor app_indicator_new$descriptor() {
        return app_indicator_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * AppIndicator *app_indicator_new(const gchar *id, const gchar *icon_name, AppIndicatorCategory category)
     * }
     */
    public static MethodHandle app_indicator_new$handle() {
        return app_indicator_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * AppIndicator *app_indicator_new(const gchar *id, const gchar *icon_name, AppIndicatorCategory category)
     * }
     */
    public static MemorySegment app_indicator_new$address() {
        return app_indicator_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * AppIndicator *app_indicator_new(const gchar *id, const gchar *icon_name, AppIndicatorCategory category)
     * }
     */
    public static MemorySegment app_indicator_new(MemorySegment id, MemorySegment icon_name, int category) {
        var mh$ = app_indicator_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_new", id, icon_name, category);
            }
            return (MemorySegment)mh$.invokeExact(id, icon_name, category);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_status(AppIndicator *self, AppIndicatorStatus status)
     * }
     */
    public static FunctionDescriptor app_indicator_set_status$descriptor() {
        return app_indicator_set_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_status(AppIndicator *self, AppIndicatorStatus status)
     * }
     */
    public static MethodHandle app_indicator_set_status$handle() {
        return app_indicator_set_status.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_status(AppIndicator *self, AppIndicatorStatus status)
     * }
     */
    public static MemorySegment app_indicator_set_status$address() {
        return app_indicator_set_status.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_status(AppIndicator *self, AppIndicatorStatus status)
     * }
     */
    public static void app_indicator_set_status(MemorySegment self, int status) {
        var mh$ = app_indicator_set_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_status", self, status);
            }
            mh$.invokeExact(self, status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_attention_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_attention_icon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_attention_icon(AppIndicator *self, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor app_indicator_set_attention_icon$descriptor() {
        return app_indicator_set_attention_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_attention_icon(AppIndicator *self, const gchar *icon_name)
     * }
     */
    public static MethodHandle app_indicator_set_attention_icon$handle() {
        return app_indicator_set_attention_icon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_attention_icon(AppIndicator *self, const gchar *icon_name)
     * }
     */
    public static MemorySegment app_indicator_set_attention_icon$address() {
        return app_indicator_set_attention_icon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_attention_icon(AppIndicator *self, const gchar *icon_name)
     * }
     */
    public static void app_indicator_set_attention_icon(MemorySegment self, MemorySegment icon_name) {
        var mh$ = app_indicator_set_attention_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_attention_icon", self, icon_name);
            }
            mh$.invokeExact(self, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_menu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_menu(AppIndicator *self, GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor app_indicator_set_menu$descriptor() {
        return app_indicator_set_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_menu(AppIndicator *self, GtkMenu *menu)
     * }
     */
    public static MethodHandle app_indicator_set_menu$handle() {
        return app_indicator_set_menu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_menu(AppIndicator *self, GtkMenu *menu)
     * }
     */
    public static MemorySegment app_indicator_set_menu$address() {
        return app_indicator_set_menu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_menu(AppIndicator *self, GtkMenu *menu)
     * }
     */
    public static void app_indicator_set_menu(MemorySegment self, MemorySegment menu) {
        var mh$ = app_indicator_set_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_menu", self, menu);
            }
            mh$.invokeExact(self, menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_icon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_icon(AppIndicator *self, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor app_indicator_set_icon$descriptor() {
        return app_indicator_set_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_icon(AppIndicator *self, const gchar *icon_name)
     * }
     */
    public static MethodHandle app_indicator_set_icon$handle() {
        return app_indicator_set_icon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_icon(AppIndicator *self, const gchar *icon_name)
     * }
     */
    public static MemorySegment app_indicator_set_icon$address() {
        return app_indicator_set_icon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_icon(AppIndicator *self, const gchar *icon_name)
     * }
     */
    public static void app_indicator_set_icon(MemorySegment self, MemorySegment icon_name) {
        var mh$ = app_indicator_set_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_icon", self, icon_name);
            }
            mh$.invokeExact(self, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_icon_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_icon_full");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_icon_full(AppIndicator *self, const gchar *icon_name, const gchar *icon_desc)
     * }
     */
    public static FunctionDescriptor app_indicator_set_icon_full$descriptor() {
        return app_indicator_set_icon_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_icon_full(AppIndicator *self, const gchar *icon_name, const gchar *icon_desc)
     * }
     */
    public static MethodHandle app_indicator_set_icon_full$handle() {
        return app_indicator_set_icon_full.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_icon_full(AppIndicator *self, const gchar *icon_name, const gchar *icon_desc)
     * }
     */
    public static MemorySegment app_indicator_set_icon_full$address() {
        return app_indicator_set_icon_full.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_icon_full(AppIndicator *self, const gchar *icon_name, const gchar *icon_desc)
     * }
     */
    public static void app_indicator_set_icon_full(MemorySegment self, MemorySegment icon_name, MemorySegment icon_desc) {
        var mh$ = app_indicator_set_icon_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_icon_full", self, icon_name, icon_desc);
            }
            mh$.invokeExact(self, icon_name, icon_desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_label");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_label(AppIndicator *self, const gchar *label, const gchar *guide)
     * }
     */
    public static FunctionDescriptor app_indicator_set_label$descriptor() {
        return app_indicator_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_label(AppIndicator *self, const gchar *label, const gchar *guide)
     * }
     */
    public static MethodHandle app_indicator_set_label$handle() {
        return app_indicator_set_label.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_label(AppIndicator *self, const gchar *label, const gchar *guide)
     * }
     */
    public static MemorySegment app_indicator_set_label$address() {
        return app_indicator_set_label.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_label(AppIndicator *self, const gchar *label, const gchar *guide)
     * }
     */
    public static void app_indicator_set_label(MemorySegment self, MemorySegment label, MemorySegment guide) {
        var mh$ = app_indicator_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_label", self, label, guide);
            }
            mh$.invokeExact(self, label, guide);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_icon_theme_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_icon_theme_path");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_icon_theme_path(AppIndicator *self, const gchar *icon_theme_path)
     * }
     */
    public static FunctionDescriptor app_indicator_set_icon_theme_path$descriptor() {
        return app_indicator_set_icon_theme_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_icon_theme_path(AppIndicator *self, const gchar *icon_theme_path)
     * }
     */
    public static MethodHandle app_indicator_set_icon_theme_path$handle() {
        return app_indicator_set_icon_theme_path.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_icon_theme_path(AppIndicator *self, const gchar *icon_theme_path)
     * }
     */
    public static MemorySegment app_indicator_set_icon_theme_path$address() {
        return app_indicator_set_icon_theme_path.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_icon_theme_path(AppIndicator *self, const gchar *icon_theme_path)
     * }
     */
    public static void app_indicator_set_icon_theme_path(MemorySegment self, MemorySegment icon_theme_path) {
        var mh$ = app_indicator_set_icon_theme_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_icon_theme_path", self, icon_theme_path);
            }
            mh$.invokeExact(self, icon_theme_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_ordering_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_ordering_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_ordering_index(AppIndicator *self, guint32 ordering_index)
     * }
     */
    public static FunctionDescriptor app_indicator_set_ordering_index$descriptor() {
        return app_indicator_set_ordering_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_ordering_index(AppIndicator *self, guint32 ordering_index)
     * }
     */
    public static MethodHandle app_indicator_set_ordering_index$handle() {
        return app_indicator_set_ordering_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_ordering_index(AppIndicator *self, guint32 ordering_index)
     * }
     */
    public static MemorySegment app_indicator_set_ordering_index$address() {
        return app_indicator_set_ordering_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_ordering_index(AppIndicator *self, guint32 ordering_index)
     * }
     */
    public static void app_indicator_set_ordering_index(MemorySegment self, int ordering_index) {
        var mh$ = app_indicator_set_ordering_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_ordering_index", self, ordering_index);
            }
            mh$.invokeExact(self, ordering_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_secondary_activate_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_secondary_activate_target");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_secondary_activate_target(AppIndicator *self, GtkWidget *menuitem)
     * }
     */
    public static FunctionDescriptor app_indicator_set_secondary_activate_target$descriptor() {
        return app_indicator_set_secondary_activate_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_secondary_activate_target(AppIndicator *self, GtkWidget *menuitem)
     * }
     */
    public static MethodHandle app_indicator_set_secondary_activate_target$handle() {
        return app_indicator_set_secondary_activate_target.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_secondary_activate_target(AppIndicator *self, GtkWidget *menuitem)
     * }
     */
    public static MemorySegment app_indicator_set_secondary_activate_target$address() {
        return app_indicator_set_secondary_activate_target.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_secondary_activate_target(AppIndicator *self, GtkWidget *menuitem)
     * }
     */
    public static void app_indicator_set_secondary_activate_target(MemorySegment self, MemorySegment menuitem) {
        var mh$ = app_indicator_set_secondary_activate_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_secondary_activate_target", self, menuitem);
            }
            mh$.invokeExact(self, menuitem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_set_title");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_set_title(AppIndicator *self, const gchar *title)
     * }
     */
    public static FunctionDescriptor app_indicator_set_title$descriptor() {
        return app_indicator_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_set_title(AppIndicator *self, const gchar *title)
     * }
     */
    public static MethodHandle app_indicator_set_title$handle() {
        return app_indicator_set_title.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_set_title(AppIndicator *self, const gchar *title)
     * }
     */
    public static MemorySegment app_indicator_set_title$address() {
        return app_indicator_set_title.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_set_title(AppIndicator *self, const gchar *title)
     * }
     */
    public static void app_indicator_set_title(MemorySegment self, MemorySegment title) {
        var mh$ = app_indicator_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_set_title", self, title);
            }
            mh$.invokeExact(self, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_get_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_get_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_id(AppIndicator *self)
     * }
     */
    public static FunctionDescriptor app_indicator_get_id$descriptor() {
        return app_indicator_get_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_id(AppIndicator *self)
     * }
     */
    public static MethodHandle app_indicator_get_id$handle() {
        return app_indicator_get_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_id(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_id$address() {
        return app_indicator_get_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const gchar *app_indicator_get_id(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_id(MemorySegment self) {
        var mh$ = app_indicator_get_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_get_id", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_get_category {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_get_category");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * AppIndicatorCategory app_indicator_get_category(AppIndicator *self)
     * }
     */
    public static FunctionDescriptor app_indicator_get_category$descriptor() {
        return app_indicator_get_category.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * AppIndicatorCategory app_indicator_get_category(AppIndicator *self)
     * }
     */
    public static MethodHandle app_indicator_get_category$handle() {
        return app_indicator_get_category.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * AppIndicatorCategory app_indicator_get_category(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_category$address() {
        return app_indicator_get_category.ADDR;
    }

    /**
     * {@snippet lang=c :
     * AppIndicatorCategory app_indicator_get_category(AppIndicator *self)
     * }
     */
    public static int app_indicator_get_category(MemorySegment self) {
        var mh$ = app_indicator_get_category.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_get_category", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_get_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_get_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * AppIndicatorStatus app_indicator_get_status(AppIndicator *self)
     * }
     */
    public static FunctionDescriptor app_indicator_get_status$descriptor() {
        return app_indicator_get_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * AppIndicatorStatus app_indicator_get_status(AppIndicator *self)
     * }
     */
    public static MethodHandle app_indicator_get_status$handle() {
        return app_indicator_get_status.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * AppIndicatorStatus app_indicator_get_status(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_status$address() {
        return app_indicator_get_status.ADDR;
    }

    /**
     * {@snippet lang=c :
     * AppIndicatorStatus app_indicator_get_status(AppIndicator *self)
     * }
     */
    public static int app_indicator_get_status(MemorySegment self) {
        var mh$ = app_indicator_get_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_get_status", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_get_icon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_icon(AppIndicator *self)
     * }
     */
    public static FunctionDescriptor app_indicator_get_icon$descriptor() {
        return app_indicator_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_icon(AppIndicator *self)
     * }
     */
    public static MethodHandle app_indicator_get_icon$handle() {
        return app_indicator_get_icon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_icon(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_icon$address() {
        return app_indicator_get_icon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const gchar *app_indicator_get_icon(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_icon(MemorySegment self) {
        var mh$ = app_indicator_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_get_icon", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_get_attention_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_get_attention_icon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_attention_icon(AppIndicator *self)
     * }
     */
    public static FunctionDescriptor app_indicator_get_attention_icon$descriptor() {
        return app_indicator_get_attention_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_attention_icon(AppIndicator *self)
     * }
     */
    public static MethodHandle app_indicator_get_attention_icon$handle() {
        return app_indicator_get_attention_icon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_attention_icon(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_attention_icon$address() {
        return app_indicator_get_attention_icon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const gchar *app_indicator_get_attention_icon(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_attention_icon(MemorySegment self) {
        var mh$ = app_indicator_get_attention_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_get_attention_icon", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_get_title");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_title(AppIndicator *self)
     * }
     */
    public static FunctionDescriptor app_indicator_get_title$descriptor() {
        return app_indicator_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_title(AppIndicator *self)
     * }
     */
    public static MethodHandle app_indicator_get_title$handle() {
        return app_indicator_get_title.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_title(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_title$address() {
        return app_indicator_get_title.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const gchar *app_indicator_get_title(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_title(MemorySegment self) {
        var mh$ = app_indicator_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_get_title", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_get_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_get_menu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GtkMenu *app_indicator_get_menu(AppIndicator *self)
     * }
     */
    public static FunctionDescriptor app_indicator_get_menu$descriptor() {
        return app_indicator_get_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GtkMenu *app_indicator_get_menu(AppIndicator *self)
     * }
     */
    public static MethodHandle app_indicator_get_menu$handle() {
        return app_indicator_get_menu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GtkMenu *app_indicator_get_menu(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_menu$address() {
        return app_indicator_get_menu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GtkMenu *app_indicator_get_menu(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_menu(MemorySegment self) {
        var mh$ = app_indicator_get_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_get_menu", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_get_label");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_label(AppIndicator *self)
     * }
     */
    public static FunctionDescriptor app_indicator_get_label$descriptor() {
        return app_indicator_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_label(AppIndicator *self)
     * }
     */
    public static MethodHandle app_indicator_get_label$handle() {
        return app_indicator_get_label.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const gchar *app_indicator_get_label(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_label$address() {
        return app_indicator_get_label.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const gchar *app_indicator_get_label(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_label(MemorySegment self) {
        var mh$ = app_indicator_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_get_label", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_get_ordering_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_get_ordering_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * guint32 app_indicator_get_ordering_index(AppIndicator *self)
     * }
     */
    public static FunctionDescriptor app_indicator_get_ordering_index$descriptor() {
        return app_indicator_get_ordering_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * guint32 app_indicator_get_ordering_index(AppIndicator *self)
     * }
     */
    public static MethodHandle app_indicator_get_ordering_index$handle() {
        return app_indicator_get_ordering_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * guint32 app_indicator_get_ordering_index(AppIndicator *self)
     * }
     */
    public static MemorySegment app_indicator_get_ordering_index$address() {
        return app_indicator_get_ordering_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * guint32 app_indicator_get_ordering_index(AppIndicator *self)
     * }
     */
    public static int app_indicator_get_ordering_index(MemorySegment self) {
        var mh$ = app_indicator_get_ordering_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_get_ordering_index", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class app_indicator_build_menu_from_desktop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MemorySegment ADDR = app_indicator_h.findOrThrow("app_indicator_build_menu_from_desktop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void app_indicator_build_menu_from_desktop(AppIndicator *self, const gchar *desktop_file, const gchar *desktop_profile)
     * }
     */
    public static FunctionDescriptor app_indicator_build_menu_from_desktop$descriptor() {
        return app_indicator_build_menu_from_desktop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void app_indicator_build_menu_from_desktop(AppIndicator *self, const gchar *desktop_file, const gchar *desktop_profile)
     * }
     */
    public static MethodHandle app_indicator_build_menu_from_desktop$handle() {
        return app_indicator_build_menu_from_desktop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void app_indicator_build_menu_from_desktop(AppIndicator *self, const gchar *desktop_file, const gchar *desktop_profile)
     * }
     */
    public static MemorySegment app_indicator_build_menu_from_desktop$address() {
        return app_indicator_build_menu_from_desktop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void app_indicator_build_menu_from_desktop(AppIndicator *self, const gchar *desktop_file, const gchar *desktop_profile)
     * }
     */
    public static void app_indicator_build_menu_from_desktop(MemorySegment self, MemorySegment desktop_file, MemorySegment desktop_profile) {
        var mh$ = app_indicator_build_menu_from_desktop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("app_indicator_build_menu_from_desktop", self, desktop_file, desktop_profile);
            }
            mh$.invokeExact(self, desktop_file, desktop_profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

