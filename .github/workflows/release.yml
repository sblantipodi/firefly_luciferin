name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'
jobs:

  create_draft_release:
    env:
      commitmsg: ${{ github.event.head_commit.message }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Release version
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      - name: Get commit message
        run: |
          echo Commit MSG = $commitmsg
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Changes in this Release
            ${{ env.commitmsg }}
          draft: true
          prerelease: false

  windows_build_parallel:
    needs: [create_draft_release]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        shell: bash
      - name: Release version
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
        shell: bash
      - name: Set up AdoptOpenJDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
          architecture: x64
      - name: Install submodules
        run: |
          git submodule update --init
        shell: bash
      - id: get-id
        run: |
          id=$(echo $RELEASE_VERSION | cut -dv -f2)
          echo "id=$id" >> $GITHUB_OUTPUT
        shell: bash
      - run: echo "${{steps.get-id.outputs.id}}"
        shell: bash
      - name: Publish package
        run: |
          mvn versions:set -DnewVersion=${{steps.get-id.outputs.id}} -DgenerateBackupPoms=false
          mvn versions:set-property -Dproperty=project.version -DnewVersion=${{steps.get-id.outputs.id}}
          mvn -B package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
      - name: Java 14 Package API, create EXE binary
        run: |
          rm -rf target/fireflyluciferin-${{steps.get-id.outputs.id}}.jar;
          cd build_tools/wixtools;
          jpackage -i ../../target --type exe --main-class org.dpsoftware.JavaFXStarter --main-jar FireflyLuciferin-jar-with-dependencies.jar --icon ../../data/img/java_fast_screen_capture_logo.ico --win-menu --win-menu-group Luciferin --copyright "Davide Perini" --name "Firefly Luciferin"  --vendor DPsoftware --win-dir-chooser --win-shortcut --win-per-user-install --win-upgrade-uuid 33c82dc4-e0e0-11ea-87d0-0242ac130003 --app-version "${{steps.get-id.outputs.id}}" --win-shortcut --win-shortcut-prompt --java-options "-XX:+UseZGC -XX:+UseStringDeduplication -Xms64m -Xmx1024m --add-modules=jdk.incubator.vector"
        shell: bash
      - name: Adding asset to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd build_tools/wixtools;
          mv Firef*.exe FireflyLuciferinSetup.exe;
          mv FireflyLuciferinSetup.exe ../../;
          cd ../../;
          gh release upload "${{ env.RELEASE_VERSION }}" FireflyLuciferinSetup.exe
        shell: bash

  linux_build_parallel:
    needs: [create_draft_release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Release version
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      - name: Set up AdoptOpenJDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
          architecture: x64
      - id: get-id
        run: |
          id=$(echo $RELEASE_VERSION | cut -dv -f2)
          echo "id=$id" >> $GITHUB_OUTPUT
      - name: Publish package
        run: |
          mvn versions:set -DnewVersion=${{steps.get-id.outputs.id}} -DgenerateBackupPoms=false
          mvn versions:set-property -Dproperty=project.version -DnewVersion=${{steps.get-id.outputs.id}}
          mvn -B package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "${{steps.get-id.outputs.id}}"
      - name: Java 14 Package API, create Linux binary
        run: |
          ls -la target
          rm -rf target/fireflyluciferin-${{steps.get-id.outputs.id}}.jar;
          jpackage -i target --main-class org.dpsoftware.JavaFXStarter --main-jar FireflyLuciferin-jar-with-dependencies.jar --icon data/img/luciferin_logo.png --linux-shortcut --copyright "Davide Perini" --name FireflyLuciferin  --vendor DPsoftware --app-version "${{steps.get-id.outputs.id}}" --java-options "-XX:+UseZGC -XX:+UseStringDeduplication -Xms64m -Xmx1024m --add-modules=jdk.incubator.vector"
      - name: Adding Linux asset to the release (Debian flavour)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv firefly* FireflyLuciferinLinux.deb;
          gh release upload "${{ env.RELEASE_VERSION }}" FireflyLuciferinLinux.deb

      - name: Adding Linux asset to the release (RedHat flavour)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt install alien -y;
          sudo alien -r FireflyLuciferinLinux.deb
          mv *.rpm FireflyLuciferinLinux.rpm;
          gh release upload "${{ env.RELEASE_VERSION }}" FireflyLuciferinLinux.rpm

  create_release:
    needs: [windows_build_parallel, linux_build_parallel]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        shell: bash
      - name: Release version
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
        shell: bash
      - id: get-id
        run: |
          id=$(echo $RELEASE_VERSION | cut -dv -f2)
          echo "id=$id" >> $GITHUB_OUTPUT
        shell: bash
      - name: Set up AdoptOpenJDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
          architecture: x64
      - name: Set up Maven Settings for deploy
        uses: s4u/maven-settings-action@v3.0.0
      - name: Set version for release
        run: |
          git config --global user.email "perini.davide@dpsoftware.org";
          git config --global user.name "Davide Perini";
          mvn versions:set -DnewVersion=${{steps.get-id.outputs.id}} -DgenerateBackupPoms=false;
          mvn versions:set-property -Dproperty=project.version -DnewVersion=${{steps.get-id.outputs.id}};
          git add pom.xml;
          git commit -m "Released by Maven using CI";
          git push;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
      - name: Deploy artifact
        continue-on-error: true
        run: |
          mvn deploy;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
#      - name: Publish release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          hub release edit --draft=false -m "Release ${{ env.RELEASE_VERSION }}" "${{ env.RELEASE_VERSION }}"
